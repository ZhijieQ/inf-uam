package es.uam.eps.bmi.recomendacion;

import java.util.*;
import java.util.Map.Entry;

public class Evaluacion {

	private double train;

	private HashMap<Integer, HashMap<Integer, Double>> datosTrain = new HashMap<>();
	private HashMap<Integer, HashMap<Integer, Double>> datosTest = new HashMap<>();
	private Recomendador recomendador;

	public void particion() {
		
		int size = recomendador.getUrm().getSizeDatos();
		int sizeTrain = (size * (int) train);
		int sizeTest = size - sizeTrain;
		int pos=0;
		Random r = new Random();
		UserRatedMovies urm= recomendador.getUrm();
		for(Entry<Integer, HashMap<Integer,Double>> peliculas: urm.getDatos().entrySet()){
			for(Entry<Integer,Double> pelicula: peliculas.getValue().entrySet()){
				if(pos<sizeTrain){
					if(datosTrain.get(pelicula.getKey())==null){
						HashMap<Integer, Double> cosa= new HashMap<>();
					}
				}
			}
		}
		
		
	}

	public double MAE(List<Recomendacion> listatest) {

		double mae = 0;

		HashMap<Integer, Double> rating = null;
		HashMap<Integer, Double> recomendacion = null;

		for (Recomendacion r : listatest) {
			rating = r.getRating();
			recomendacion = r.getRecomendacion();
			for (Integer i : recomendacion.keySet())
				mae += Math.abs(recomendacion.get(i) - rating.get(i));

		}
		mae /= listatest.size();

		return mae;
	}

	public double RMSE(List<Recomendacion> listatest) {

		double rmse = 0;

		HashMap<Integer, Double> rating = null;
		HashMap<Integer, Double> recomendacion = null;

		for (Recomendacion r : listatest) {
			rating = r.getRating();
			recomendacion = r.getRecomendacion();
			for (Integer i : recomendacion.keySet())
				rmse += Math.pow(Math.abs(recomendacion.get(i) - rating.get(i)), 2.0);
		}

		rmse = Math.sqrt(rmse);
		rmse /= listatest.size();

		return rmse;
	}

	public static void main(String[] args) {

	}
}
