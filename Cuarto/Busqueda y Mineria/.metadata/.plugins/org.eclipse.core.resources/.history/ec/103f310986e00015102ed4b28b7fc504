package es.uam.eps.bmi.search.indexing;

import java.io.*;
import java.util.*;
import java.util.zip.*;

import org.apache.lucene.util.IOUtils;

import es.uam.eps.bmi.search.*;
import es.uam.eps.bmi.search.indexing.thread.ThreadInsert;
import es.uam.eps.bmi.search.parsing.*;

public class BasicIndexing implements Index{
	private Set<String> vocabulario;
	private HashMap<String, ArrayList<Posting>> indices;
	

	/**
	 * @return the vocabulario
	 */
	public Set<String> getVocabulario() {
		return vocabulario;
	}


	/**
	 * @param vocabulario the vocabulario to set
	 */
	public void setVocabulario(Set<String> vocabulario) {
		this.vocabulario = vocabulario;
	}


	/** Leemos los zips sin necesidad de extraerlos
	 * 
	 * @param zipIn ZipInputStream que hace referencia a un elemento dentro del zip para leerlo
	 * @return string tokenizada y sin stopwords para meter en el indice
	 */
	private String readZips(ZipInputStream zipIn){
		String linea = null;
		String texto = new String();
		try {
			File f = new File ("doc.txt");
			BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("doc.txt"));
			BufferedReader br = new BufferedReader(new FileReader(f));
			byte[] bytesIn = new byte[4096];
			int read = 0;
	        while ((read = zipIn.read(bytesIn)) != -1) 
	            bos.write(bytesIn, 0, read);
	        bos.close();
	        while((linea=br.readLine())!=null){
	        	texto = texto.concat(linea+"\n");
	        }
	        br.close();
	        f.delete();
	        return texto;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public String[] readZips2(String input){
		File f = new File(input);
		String[] docs= null;
		try {
			ZipFile zf= new ZipFile(f);
			Enumeration<? extends ZipEntry> zs = zf.entries();
			
			System.out.println("size:"+zf.size());
			docs= new String[zf.size()];
			int i=0;
			while(zs.hasMoreElements()){
				ZipEntry z=zs.nextElement();
				System.out.println(z.getName());
				BufferedReader br= new BufferedReader(new InputStreamReader(zf.getInputStream(z)));
				String line;
				String doc= new String();
				int ln=0;
				while( (line=br.readLine()) !=null ){
					if(ln>14){
						doc.concat(line+"\n");
						//System.out.println(line);
					}
					ln++;
				}
				docs[i]=doc;
				i++;
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return docs;
	}
	
	

	public static String normalizar(String s){
		
		String[] car= {",",".","-","[","]","{","}","?","¿","%","\"","(",")","#","$","`","´", "“",";",":", "\\", "/", "@",
				"¡", "!", "=", "<", ">","'","&"};
	    for (int i=0; i<car.length; i++) {
	        s = s.replace(car[i], "");
	    }
	    return s.toLowerCase();
	}
	public void creaPosting(String palabra, ArrayList<String> docs){
		String[] palabras=null;
		Integer i=0;
		long j=0;
		ArrayList<Posting> posts= new ArrayList<>();
		for(String s: docs){
			palabras=s.split(" |\n|\r|\t");
			j=0;
			Posting p= new Posting(i.toString());
			List<Long> posiciones= new ArrayList<>();
			for(String s2: palabras){
				
				if(s2.length()>0 && palabra.equals(normalizar(s2))){
					posiciones.add(j);
				}
				j++;
			}
			p.setTermFrequency(posiciones.size());
			p.setTermPositions(posiciones);
			
			if(p.getTermFrequency()>0)
				posts.add(p);
			i++;
		}
		indices.put(palabra, posts);
	}
	
	@Override
	public void build(String inputCollectionPath, String outputIndexPath, TextParser textParser) {
		
		Set<String> vocabulario = new HashSet<String>();
		String[] palabros= null;
		String [] docs= null;
 		long time=0, time2=0;
		try {
			docs=readZips2(inputCollectionPath);

			System.out.println(docs[0]);
			for (String doc: docs){
				doc=textParser.parse(doc);				
			}

			System.out.println(docs[0]);
			/*time=System.nanoTime();
			doc=normalizar(doc);
			time= System.nanoTime()-time;
			time2+=time;
			palabros=doc.split(" |\n|\r|\t");
			
			
			for (String s: palabros){
				if(s.length()>0)
					vocabulario.add(s);
			}*/
			
		}catch (Exception e){
			e.printStackTrace();
		}

		System.out.println("tiempo norm:"+time/Math.pow(10, 9));
		
		return;
	}
	
	
	@Override
	public void load(String indexPath) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String getPath() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<String> getDocIds() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public TextDocument getDocument(String docId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<String> getTerms() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Posting> getTermPostings(String term) {
		
		return this.indices.get(term);
	}
	public static void main (String[] args){
		BasicIndexing i= new BasicIndexing();
		i.readZips2("/home/tron/Descargas/clueweb-1K/docs.zip");
		/*long time=0;
		Runtime r=Runtime.getRuntime();
		Set<String> voc=null;
		time=System.nanoTime();
		i.build("/home/flyn/Descargas/clueweb-1K/docs.zip","", new HTMLSimpleParser());
		time= System.nanoTime()-time;
		System.out.println("tiempo:"+time/Math.pow(10, 9));
		System.out.println("Ocupada:"+r.totalMemory()/Math.pow(2,20)+" MB");
		System.out.println("Libre:"+r.freeMemory()/Math.pow(2,20)+" MB");
		System.out.println("Vocabulario: "+i.getVocabulario().size());
		for(String s: i.getVocabulario()){
			System.out.println("palabra:["+s+"]"+" size:"+s.length());
			System.out.println("Posts:"+ i.getTermPostings(s));
			break;
		}*/
	}

}
