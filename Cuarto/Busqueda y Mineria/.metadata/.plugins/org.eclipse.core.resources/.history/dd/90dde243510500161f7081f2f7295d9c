package es.uam.eps.bmi.recomendacion;

import java.util.*;

public class RecomendadorColaborativo {

	private UserRatedMovies urm;
	private int k;

	public RecomendadorColaborativo(String path, int k) {
		urm = new UserRatedMovies();
		this.k = k;
		urm.cargarDatos("similitudcosen.txt",path+"/user_ratedmovies.dat");
	}
	
	public void binJaccard(){
		urm.similitudBinJaccard();
	}
	public void binCoseno(){
		urm.similitudBinCoseno();
	}
	
	public double getRatingUser(int user,int movie){
		return this.urm.getDatos().get(user).get(movie);
	}
	
	public double knn(int userId, int movieId){

		int col=0;
		int ln =urm.getUserIds().get(userId);
		ArrayList<Integer> maxSimKey= new ArrayList<>();
		ArrayList<Double> maxSimValue= new ArrayList<>();
		for(int i=0; i<k; i++){
			maxSimKey.add(0);
			maxSimValue.add(0.0);
		}
		
		/**
		 * Este bucle mierdoso de abajo es para
		 * oredenar los k vecinos mas proximos.
		 * */
		double val;
		int keyAux;
		for(Integer key :urm.getUserIds().keySet()){
			//Si vamos a evaluarnos a nosotros mismos, o a un usuario que no ha visto la peli, saltamos
			if(key.equals(userId) || !urm.getDatos().get(key).containsKey(movieId))
				continue;
			//Cogemos la simulitud
			val=urm.getSimilitudes()[ln][urm.getUserIds().get(key)];
			
			//Si el valor de la similitud que acabamos de obtener es mayor que el peor, lo metemos y
			//reordenamos la lista
			if(maxSimValue.get(k-1) < val ){
				maxSimValue.set(k-1, val);
				maxSimKey.set(k-1, key);
				for(int i= k-1; i>0; i--){
					if(maxSimValue.get(i-1) > maxSimValue.get(i)){
						break;
					}
					val=maxSimValue.get(i-1);
					maxSimValue.set(i-1, maxSimValue.get(i));
					maxSimValue.set(i, val);
					
					keyAux=maxSimKey.get(i-1);
					maxSimKey.set(i-1, maxSimKey.get(i));
					maxSimKey.set(i, keyAux);
				}
			}
		}
		
		/**
		 * Ahora es cuando se calcula el valor de 
		 * knn para la recomnedacion de la peli esta
		 */
		
		double rating=0;
		double simTot=0;
		
		for(int i=0; i< maxSimKey.size(); i++){
			//Calculamos la recomendaciÃ³n.
			if(urm.getDatos().get(userId).containsKey(maxSimKey.get(i)))
				rating+=urm.getDatos().get(userId).get(maxSimKey.get(i)) * maxSimValue.get(i);
			simTot+= maxSimValue.get(i);
		}
		
		return rating/simTot;
	}

	public static void main(String [] args){
		RecomendadorColaborativo r= new RecomendadorColaborativo("hetrec2011-movielens-2k-v2", 200);
		r.binJaccard();
		System.out.println(r.knn(75, 420));
	}
}
