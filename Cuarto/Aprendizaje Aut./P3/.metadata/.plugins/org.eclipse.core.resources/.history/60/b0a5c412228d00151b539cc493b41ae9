package clasificadores;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Enumeration;


import clasesAlgoritmoGentecio.*;
import datos.Datos;
import interfacesAlgoritmoGenetico.*;

public class ClasificadorGenetico extends Clasificador {

	EndAlgGen parada;
	Seleccion selecc;
	Fitness fit;
	IniPoblacion inip;
	Mutacion mut;
	Recombinar reco;
	SelectPadres sepad;
	int tamPoblacion;
	double cruce, pmut, elite, apriori;
	Individuo seleccionado;
	ArrayList<Double> res;
	
	public ClasificadorGenetico(EndAlgGen parada, Seleccion selecc, Fitness fit, IniPoblacion inip,
			Mutacion mut, Recombinar reco, SelectPadres sepad, int tamPoblacion, double cruce, double pmut,
			double elite, int nreg) {
		this.parada= parada;
		this.selecc= selecc;
		this.fit=fit;
		this.inip= inip;
		this.mut=mut;
		this.reco= reco;
		this.sepad= sepad;
		this.tamPoblacion=tamPoblacion;
		this.cruce=cruce;
		this.pmut=pmut;
		this.elite=elite;
		this.res= new ArrayList<Double>();
	}

	@Override
	public void entrenamiento(Datos datosTrain) {
		Poblacion p = inip.crearPoblacion(tamPoblacion, nreg);
		Poblacion p2=null;
		
		ClasificadorAPriori priori = new ClasificadorAPriori();
		
		priori.entrenamiento(datosTrain);
		apriori=priori.getMaxClase();
		
		fit.generarBitSets(datosTrain);
		fit.fit(p, datosTrain);
		
		

		while(!parada.end()){
			System.out.println("poblacion1:"+p.getIndividuos().size()+"\n");
			p2=sepad.selectPadres(p);
			System.out.println("poblacion2:"+p.getIndividuos().size()+"\n");
			p2= reco.recombinar(p2, cruce);
			System.out.println("poblacion3:"+p.getIndividuos().size()+"\n");
			mut.mutar(p2, pmut);
			System.out.println("poblacion4:"+p.getIndividuos().size()+"\n");
			fit.fit(p2, datosTrain);
			System.out.println("poblacion5:"+p.getIndividuos().size()+"\n");
			p=selecc.seleccionar(p, p2, elite);
			System.out.println(p.getIndividuos().get(0).getFit());
		}

		double max = -1;
		for (Individuo inv: p.getIndividuos()){
			if(inv.getFit()>max){
				max=inv.getFit();
				seleccionado=inv;
			}
		}
		System.out.println("fin train elegido:"+seleccionado.getFit());
		
	}

	@Override
	public ArrayList<Double> clasifica(Datos datosTest) {
		
		fit.generarBitSets(datosTest);
		for(int i=0; i<datosTest.getNumDatos(); i++){
			System.out.println(i);
			for(Regla r: seleccionado.getReglas()){
				boolean cond=true;
			    for(int j=0; j<datosTest.getSizeTipoAtributos()-1; j++){
					BitSet num1 = datosTest.getDatoBS(i, j);
					BitSet num2 = r.getRegla().get(j);
					Boolean b = num1.intersects(num2);
					if(b==false){
						cond=false;
						break;
					}
			    }
			    if(cond==true){
		    		Enumeration<Double> keys= datosTest.getHashClase().keys();
		    		while(keys.hasMoreElements()){
		    			Double val=keys.nextElement();
		    			if (val==datosTest.getDato(i, datosTest.getSizeCountAtributos()-1)){
		    				res.add(val);
		    			}
		    		}
		    		break;
		    	}
		    	else{
		    		res.add(apriori);
		    	}
			    

			}	
		}
		
		System.out.println(res);
		return res;
	}

	@Override
	public ArrayList<Double> getResultado() {
		return res;
	}
}
