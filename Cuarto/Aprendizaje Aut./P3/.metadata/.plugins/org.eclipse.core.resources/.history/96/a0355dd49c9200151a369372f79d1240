package clasificadores;

import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Enumeration;


import clasesAlgoritmoGentecio.*;
import datos.Datos;
import interfacesAlgoritmoGenetico.*;

public class ClasificadorGenetico extends Clasificador {

	EndAlgGen parada;
	Seleccion selecc;
	Fitness fit;
	IniPoblacion inip;
	Mutacion mut;
	Recombinar reco;
	SelectPadres sepad;
	double apriori;
	Individuo seleccionado;
	ArrayList<Double> res;
	
	public ClasificadorGenetico(EndAlgGen parada, Seleccion selecc, Fitness fit, IniPoblacion inip,
			Mutacion mut, Recombinar reco, SelectPadres sepad) {
		this.parada= parada;
		this.selecc= selecc;
		this.fit=fit;
		this.inip= inip;
		this.mut=mut;
		this.reco= reco;
		this.sepad= sepad;
		this.res= new ArrayList<Double>();
	}

	@Override
	public void entrenamiento(Datos datosTrain) {
		
		FileOutputStream out = new FileOutputStream("the-file-name");

		Poblacion p = inip.crearPoblacion();
		Poblacion p2=null;
		
		ClasificadorAPriori priori = new ClasificadorAPriori();
		priori.entrenamiento(datosTrain);
		apriori=priori.getMaxClase();
		
		fit.generarBitSets(datosTrain);
		fit.fit(p, datosTrain);
		double mejor=p.getIndividuos().get(0).getFit();
		
		while(!parada.end(p.getIndividuos().get(0).getFit())){
			p2=sepad.selectPadres(p);
			p2= reco.recombinar(p2);
			mut.mutar(p2);
			fit.fit(p2, datosTrain);
			p=selecc.seleccionar(p, p2);
			if(mejor<p.getIndividuos().get(0).getFit()){
				mejor=p.getIndividuos().get(0).getFit();
				System.out.println("Máximo Fit = "+mejor);
			}	
			
			out.write("asd");
			System.out.println("Máximo Fit = "+mejor);
		}

		double max = -1;
		for (Individuo inv: p.getIndividuos()){
			if(inv.getFit()>max){
				max=inv.getFit();
				seleccionado=inv;
			}
		}
		System.out.println("Fin train elegido:"+seleccionado.getFit()+"\n");
		
	}

	@Override
	public ArrayList<Double> clasifica(Datos datosTest) {
		
		fit.generarBitSets(datosTest);
		int numPriori = 0;
		
		for(int i=0; i<datosTest.getNumDatos(); i++){
			boolean cond2=false;
			for(Regla r: seleccionado.getReglas()){
				boolean cond=true;
			    for(int j=0; j<datosTest.getSizeTipoAtributos()-1; j++){
					BitSet num1 = datosTest.getDatoBS(i, j);
					BitSet num2 = r.getRegla().get(j);
					Boolean b = num1.intersects(num2);
					if(b==false){
						cond=false;
						break;
					}
			    }
			    if(cond==true){
		    		Enumeration<Double> keys= datosTest.getHashClase().keys();
		    		while(keys.hasMoreElements()){
		    			Double key=keys.nextElement();
		    			if (datosTest.getHashClase().get(key).equals(r.getPrediccion())==true){
		    				res.add(key);
		    				cond2=true;
		    				break;
		    			}
		    		}
		    		break;
		    	}
			}
			if(cond2==false){
	    		res.add(apriori);
	    		numPriori++;
			}
		}
		System.out.println("Datos predecidos por priori   = "+numPriori);
		System.out.println("Datos predecidos por genetico = "+(datosTest.getNumDatos()-numPriori)+"\n");
		return res;
	}

	@Override
	public ArrayList<Double> getResultado() {
		return res;
	}
}
