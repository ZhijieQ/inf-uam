package clasificadores;
import datos.*;
import particionado.*;
import java.util.ArrayList;

abstract public class Clasificador {
	abstract public void entrenamiento (Datos datosTrain);
	abstract public ArrayList<Double> clasifica (Datos datosTest);
	public Boolean fLaplace;
	abstract public ArrayList<Double> getResultado();
	static int[][] confusion;
	
	public static double error (Datos datos, Clasificador clas) {
		/*Recorremos todos los datos*/
		int error = 0;
		for(int i=0; i<datos.getNumDatos(); i++){
			//System.out.println("	Real: "+datos.getDato(i, datos.getSizeTipoAtributos()-1)+ "		Prediccion: "+ clas.getResultado().get(i)*1.0);
			/*Comprobamos si el dato es correcto*/
			if(datos.getDato(i, datos.getSizeTipoAtributos()-1) != clas.getResultado().get(i)*1.0){
				error++;
			}
			/*AÃ±adimos el dato a su lugar en la matrix de confusion*/
			if (datos.getClasesValue(clas.getResultado().get(i))!=null)
				confusion[datos.getClasesValue(clas.getResultado().get(i))][datos.getClasesValue(datos.getDato(i, datos.getSizeTipoAtributos()-1))]++;
		}
		
		/*Devolvemos el % de errores sobre el total de comprobaciones*/
		return error/(datos.getNumDatos()*1.0);
	}
	
	public static ArrayList<Double> validacion(EstrategiaParticionado part, Datos datos, Clasificador clas) {
		/*Inicializacion de la matriz de confusion*/
		confusion = new int[datos.getClases().size()][datos.getClases().size()];		
		for(int j=0,k=0; j<datos.getClases().size(); j++){
			for(;k<datos.getClases().size();k++){
				datos.getClases().keys().nextElement();
				confusion[j][k]=0;
			}	
		}
		
		/*Para particion recibida se realiza el entrenamiento, test y se contabilizan los errores*/
		ArrayList<Double> res = new ArrayList<Double>();
		for (Particion p:part.crearPartciones(datos)){
			clas.entrenamiento(datos.getParticion( p.getTrain()));
			clas.clasifica(datos.getParticion( p.getTest()));
			Double e=Clasificador.error(datos.getParticion(p.getTest()), clas);
			res.add(e);
		}
		return res;
	}
	
	public static void matrizConf(){
		System.out.println("Matriz de confusion:");
		for(int i=0;i<confusion.length;i++){
			for(int j=0;j<confusion.length;j++){
				System.out.print("["+confusion[i][j]+"]\t");
			}
			System.out.println();
		}
	}
	
	public static void validar(EstrategiaParticionado part, Datos datos, Clasificador clas, boolean matriz){
		ArrayList<Double> errores = Clasificador.validacion(part, datos, clas);
		Double suma=0.0;
		for(Double e: errores){
			//System.out.println("Error de una prueba = "+e*100);
			suma = suma + e;
		}
		System.out.println("Error medio = "+suma/errores.size()*100+" %");
		if(matriz) matrizConf();
	}
	
	public static void main(String []args) {
		
		boolean matriz = false;
		
		System.out.println("- Leyendo ficheros...");
		Datos d1 = Datos.cargaDeFichero("src/ficheros/tic-tac-toe.data");
		Datos d2 = Datos.cargaDeFichero("src/ficheros/crx.data");
		Datos d3 = Datos.cargaDeFichero("src/ficheros/iris.data");
		
		System.out.println("- Creando estrategias de particionado y clasificadores...");
		EstrategiaParticionado part1 = new ValidacionSimple(70);
		EstrategiaParticionado part2 = new ValidacionCruzada(5);
		EstrategiaParticionado part3 = new ValidacionCruzada(12);
		Clasificador c1 = new ClasificadorAPriori();
		Clasificador c2 = new ClasificadorNaiveBayes(false);
		Clasificador c3 = new ClasificadorNaiveBayes(true);
		Clasificador c4 = new ClasificadorNaiveBayesNorm(false);
		Clasificador c5 = new ClasificadorNaiveBayesNorm(true);
		
		System.out.println("- OPERANDO...");
		System.out.println("");
		System.out.println("- APARTADOS 1 y 2");
		System.out.println("");
		
		System.out.println("-- TIC-TAC-TOE");
		System.out.println("A Priori, comparamos como influye el particionado (simple70, cruzada5, cruzada10)");
		validar(part1, d1, c1, matriz);
		validar(part2, d1, c1, matriz);
		validar(part3, d1, c1, matriz);
		System.out.println("NaiveBayes, vemos la mejoria");
		validar(part1, d1, c2, matriz);
		validar(part2, d1, c2, matriz);
		validar(part3, d1, c2, matriz);
		System.out.println("NaiveBayes con Laplace, no mejora pues hay al menos un x, o y b en todos los atributos");
		validar(part1, d1, c3, matriz);
		validar(part2, d1, c3, matriz);
		validar(part3, d1, c3, matriz);
		System.out.println("NaiveBayes suponiedo dist. normal de los continuos, no hay ninguno, no hay ceros en las tablas, obtenemos mismos datos");
		validar(part1, d1, c4, matriz);
		validar(part2, d1, c4, matriz);
		validar(part3, d1, c4, matriz);
		System.out.println("NaiveBayes con Laplace suponiedo dist. normal de los continuos, no hay ninguno, obtenemos mismos datos");
		validar(part1, d1, c5, matriz);
		validar(part2, d1, c5, matriz);
		validar(part3, d1, c5, matriz);
		System.out.println("");
		
		System.out.println("-- CRX");
		System.out.println("A Priori, comparamos como influye el particionado (simple70, cruzada5, cruzada10)");
		validar(part1, d2, c1, matriz);
		validar(part2, d2, c1, matriz);
		validar(part3, d2, c1, matriz);
		System.out.println("NaiveBayes, vemos la mejoria");
		validar(part1, d2, c2, matriz);
		validar(part2, d2, c2, matriz);
		validar(part3, d2, c2, matriz);
		System.out.println("NaiveBayes con Laplace, mejora pues ahora si que se estan eliminando ceros en las tablas");
		validar(part1, d2, c3, matriz);
		validar(part2, d2, c3, matriz);
		validar(part3, d2, c3, matriz);
		System.out.println("NaiveBayes suponiedo dist. normal de los continuos, empeora pues la suposicion no es correcta");
		validar(part1, d2, c4, matriz);
		validar(part2, d2, c4, matriz);
		validar(part3, d2, c4, matriz);
		System.out.println("NaiveBayes con Laplace suponiedo dist. normal de los continuos, empeora pues la suposicion no es correcta");
		validar(part1, d2, c5, matriz);
		validar(part2, d2, c5, matriz);
		validar(part3, d2, c5, matriz);
		System.out.println("");
		
		System.out.println("-- IRIS");
		System.out.println("A Priori, comparamos como influye el particionado (simple70, cruzada5, cruzada10)");
		validar(part1, d3, c1, matriz);
		validar(part2, d3, c1, matriz);
		validar(part3, d3, c1, matriz);
		System.out.println("NaiveBayes, vemos la mejoria");
		validar(part1, d3, c2, matriz);
		validar(part2, d3, c2, matriz);
		validar(part3, d3, c2, matriz);
		System.out.println("NaiveBayes con Laplace, mejora pues ahora si que se estan eliminando ceros en las tablas");
		validar(part1, d3, c3, matriz);
		validar(part2, d3, c3, matriz);
		validar(part3, d3, c3, matriz);
		System.out.println("NaiveBayes suponiedo dist. normal de los continuos, mejora pues la suposicion es correcta");
		validar(part1, d3, c4, matriz);
		validar(part2, d3, c4, matriz);
		validar(part3, d3, c4, matriz);
		System.out.println("NaiveBayes con Laplace suponiedo dist. normal de los continuos, Laplace no influye pues los datos son continuos todos");
		validar(part1, d3, c5, matriz);
		validar(part2, d3, c5, matriz);
		validar(part3, d3, c5, matriz);
		System.out.println("");
		
		System.out.println("- APARTADO 3");
		c1.entrenamiento(d1);
		System.out.println(c1.toString());
		Datos d11 = Datos.cargaDeFichero("src/ficheros/tic-tac-toe.data");
		ClasificadorNaiveBayes nb1 = new ClasificadorNaiveBayes(false);
		nb1.entrenamiento(d11);
		System.out.println(nb1.maximaVerosimilitud(d11, "MLeftSq", "b", "positive"));
		Datos d12 = Datos.cargaDeFichero("src/ficheros/tic-tac-toe.data");
		nb1 = new ClasificadorNaiveBayes(false);
		nb1.entrenamiento(d12);
		System.out.println(nb1.maximaVerosimilitud(d12, "TRightSq", "x", "negative"));
		System.out.println("");
		
		System.out.println("- APARTADO 4");
		c1.entrenamiento(d2);
		System.out.println(c1.toString());
		Datos d21 = Datos.cargaDeFichero("src/ficheros/crx.data");
		nb1.entrenamiento(d21);
		System.out.println(nb1.maximaVerosimilitud(d21, "A7", "bb", "+"));
		Datos d22 = Datos.cargaDeFichero("src/ficheros/crx.data");
		nb1.entrenamiento(d22);
		System.out.println(nb1.maximaVerosimilitud(d22, "A4", "u", "-"));
		Datos d23 = Datos.cargaDeFichero("src/ficheros/crx.data");
		ClasificadorNaiveBayesNorm nb3 = new ClasificadorNaiveBayesNorm(true);
		nb3.entrenamiento(d23);
		System.out.println(nb3.datosNormal(d23, "A2", "+"));
		d23 = Datos.cargaDeFichero("src/ficheros/crx.data");
		System.out.println(nb3.datosNormal(d23, "A14", "+"));
		d23 = Datos.cargaDeFichero("src/ficheros/crx.data");
		System.out.println(nb3.datosNormal(d23, "A15", "+"));
		System.out.println("");
		
		System.out.println("- FIN.");
	}
}